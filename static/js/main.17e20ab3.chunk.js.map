{"version":3,"sources":["Dropdown.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","props","handleClick","handleSelected","options","selected","isOpen","optionsFiltered","filter","item","id","unshift","react_default","a","createElement","map","option","index","key","className","details","onClick","text","config","App","state","_this","setState","prevState","find","_this$state","this","src_Dropdown","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAmCeA,SAjCE,SAACC,GAAU,IACnBC,EAA0DD,EAA1DC,YAAaC,EAA6CF,EAA7CE,eAAgBC,EAA6BH,EAA7BG,QAASC,EAAoBJ,EAApBI,SAAUC,EAAUL,EAAVK,OAEjDC,EAAkBH,EACrBI,OAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOL,EAASK,KAIvC,OADAH,EAAgBI,QAAQN,GAEtBO,EAAAC,EAAAC,cAAA,WACGR,EAASC,EAAgBQ,IAAI,SAACC,EAAQC,GAAT,OAC5BL,EAAAC,EAAAC,cAAA,OACEI,IAAKF,EAAON,GACZS,UAAW,6BACPH,EAAOI,QAAUJ,EAAOI,QAAU,IAAO,KAAiB,IAAVH,EAAc,gBAAiB,IACnFI,QAAS,kBAAMlB,EAAea,EAAON,MAEtCM,EAAOM,QAERV,EAAAC,EAAAC,cAAA,OACEO,QAAS,kBAAMnB,KACfiB,UAAU,sBAEXd,EAASiB,KACVV,EAAAC,EAAAC,cAAA,QACEK,UAAWb,EAAS,GAAK,uBCtB7BiB,EAAS,CACb,CAACb,GAAI,EAAGY,KAAM,YACd,CAACZ,GAAI,EAAGY,KAAM,WACd,CAACZ,GAAI,EAAGY,KAAM,UACd,CAACZ,GAAI,EAAGY,KAAM,UACd,CAACZ,GAAI,EAAGY,KAAM,gBAAiBF,QAAS,kBA0C3BI,6MAtCbC,MAAQ,CACNrB,QAASmB,EACTjB,QAAQ,EACRD,SAAUkB,EAAO,MAGnBrB,YAAc,WACZwB,EAAKC,SAAS,SAAAC,GAAS,MAAK,CAC1BtB,QAASsB,EAAUtB,aAIvBH,eAAiB,SAACO,GAChBgB,EAAKC,SAAS,SAAAC,GAAS,MACrB,CACEvB,SAAUuB,EAAUxB,QAAQyB,KAAK,SAAApB,GAAI,OAAIA,EAAKC,KAAOA,IACrDJ,QAAQ,8EAKL,IAAAwB,EAC+BC,KAAKN,MAAnCrB,EADD0B,EACC1B,QAASE,EADVwB,EACUxB,OAAQD,EADlByB,EACkBzB,SAEzB,OACEO,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACkB,EAAD,CACA5B,QAASA,EACTE,OAAQA,EACRD,SAAUA,EACVH,YAAa6B,KAAK7B,YAClBC,eAAgB4B,KAAK5B,yBAhCX8B,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.17e20ab3.chunk.js","sourcesContent":["import React from 'react';\n\nconst Dropdown = (props) => {\n  const {handleClick, handleSelected, options, selected, isOpen} = props;\n\n  const optionsFiltered = options\n    .filter(item => item.id !== selected.id)\n  \n  \n  optionsFiltered.unshift(selected)\n  return (\n    <div> \n      {isOpen ? optionsFiltered.map((option, index) => \n        <div\n          key={option.id}\n          className={\"Dropdown__selector-items \" \n          + ((option.details ? option.details : '')) + \" \" + (index === 0 ? \"Dropdown-open\": \"\")}\n          onClick={() => handleSelected(option.id)}\n        >\n        {option.text}\n        </div>) :\n        <div \n          onClick={() => handleClick()}\n          className=\"Dropdown__selector\"\n        >\n        {selected.text}\n        <span\n          className={isOpen ? \"\" : \"Dropdown-close\"}\n        ></span>\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default Dropdown;","import React, { Component } from 'react';\n\nimport './App.css';\nimport Dropdown from './Dropdown';\n\nconst config = [\n  {id: 1, text: \"Dropdown\"},\n  {id: 2, text: \"Preview\"},\n  {id: 3, text: \"Rename\"},\n  {id: 4, text: \"Delete\"},\n  {id: 5, text: \"Separate link\", details: \"separate-link\"},\n]\n\nclass App extends Component {\n  state = {\n    options: config,\n    isOpen: false,\n    selected: config[0],\n  }\n\n  handleClick = () => {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen,\n    }))\n  }\n\n  handleSelected = (id) => {\n    this.setState(prevState => (\n      {\n        selected: prevState.options.find(item => item.id === id),\n        isOpen: false,\n      }\n    ))\n  }\n\n  render() {\n    const { options, isOpen, selected } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Dropdown\n        options={options}\n        isOpen={isOpen}\n        selected={selected}\n        handleClick={this.handleClick}\n        handleSelected={this.handleSelected}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}